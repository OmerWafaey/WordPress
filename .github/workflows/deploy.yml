name: Deploy Workflow

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  PUBLIC_S3_BUCKET: omar-app-bucket
  PRIVATE_S3_BUCKET: omar-app-private-bucket

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::577638394586:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Package Repository and Upload to S3
      run: |
        DATE=$(date +%Y%m%d)
        S3_OBJECT="app_${DATE}.tar.gz"
        echo "Packaging repository..."
        tar --exclude='./.git' --exclude='./.github' -czf ${S3_OBJECT} .
        echo "Uploading ${S3_OBJECT} to S3 bucket ${PUBLIC_S3_BUCKET}..."
        aws s3 cp ${S3_OBJECT} s3://${{ env.PUBLIC_S3_BUCKET }}/${S3_OBJECT}

    - name: Set Expiry Policy for S3
      run: |
        echo "Setting expiry policy for S3 bucket ${PUBLIC_S3_BUCKET}..."
        aws s3api put-bucket-lifecycle-configuration --bucket ${{ env.PUBLIC_S3_BUCKET }} --lifecycle-configuration '{"Rules":[{"ID":"DeleteObjectsAfter7Days","Prefix":"","Status":"Enabled","Expiration":{"Days":7}}]}'

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::577638394586:role/GitHubActionsRole
        aws-region: ${{ env.AWS_REGION }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Deploy to Auto Scaling Group
      run: |
        echo "Fetching instances from Auto Scaling Group..."
        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name omar-alb \
          --query "AutoScalingGroups[0].Instances[].InstanceId" \
          --output text --region ${{ env.AWS_REGION }})

        echo "Deploying to instances..."
        for INSTANCE_ID in $INSTANCE_IDS; do
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" \
            --output text --region ${{ env.AWS_REGION }})
          
          echo "Deploying to instance $INSTANCE_ID with IP $PUBLIC_IP..."
          ssh-keyscan -H $PUBLIC_IP >> ~/.ssh/known_hosts
          scp -i /tmp/key.pem -o StrictHostKeyChecking=no /tmp/app_$(date +%Y%m%d).tar.gz ec2-user@$PUBLIC_IP:/tmp/
          scp -i /tmp/key.pem -o StrictHostKeyChecking=no /tmp/wp-config.php ec2-user@$PUBLIC_IP:/tmp/
          
          ssh -i /tmp/key.pem -o StrictHostKeyChecking=no ec2-user@$PUBLIC_IP \
          "sudo tar -xzf /tmp/app_$(date +%Y%m%d).tar.gz -C /var/www/html && \
           sudo mv /tmp/wp-config.php /var/www/html/wp-config.php && \
           sudo systemctl restart httpd"
        done
