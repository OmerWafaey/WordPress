name: Deploy WordPress Application

on:
  workflow_dispatch: {}
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  PUBLIC_S3_BUCKET: omar-app-bucket
  PRIVATE_S3_BUCKET: omar-app-private-bucket

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      s3object: ${{ steps.object.outputs.s3object }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Package Repo and Upload to Public S3
      id: object
      run: |
        DATE=$(date +%Y%m%d)
        s3object=$(echo "app_${DATE}.tar.gz")
        echo "S3 Object: $s3object"
        echo "s3object=$s3object" >> $GITHUB_OUTPUT
        tar -czf ${s3object} .
        aws s3 cp ${s3object} s3://${{ env.PUBLIC_S3_BUCKET }}/${s3object}

    - name: Apply Expiry Policy to Public S3 Bucket
      run: |
        aws s3api put-bucket-lifecycle-configuration --bucket ${{ env.PUBLIC_S3_BUCKET }} --lifecycle-configuration '{"Rules":[{"ID":"DeleteObjectsAfter7Days","Prefix":"","Status":"Enabled","Expiration":{"Days":7}}]}'

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC

    - name: Deploy to Auto Scaling Group
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        S3_OBJECT: ${{ needs.build.outputs.s3object }}
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/key.pem
        chmod 600 /tmp/key.pem

        INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name omar-alb \
          --query "AutoScalingGroups[0].Instances[].InstanceId" --output text --region ${{ env.AWS_REGION }})

        for INSTANCE_ID in $INSTANCE_IDS; do
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text --region ${{ env.AWS_REGION }})

          echo "Deploying to instance $INSTANCE_ID with IP $PUBLIC_IP"

          ssh -i /tmp/key.pem -o StrictHostKeyChecking=no ec2-user@$PUBLIC_IP \
          "aws s3 cp s3://${{ env.PUBLIC_S3_BUCKET }}/${S3_OBJECT} /tmp/ && \
           sudo tar -xzf /tmp/${S3_OBJECT} -C /var/www/html && \
           aws s3 cp s3://${{ env.PRIVATE_S3_BUCKET }}/wp-config.php /tmp/wp-config.php && \
           sudo mv /tmp/wp-config.php /var/www/html/wp-config.php && \
           sudo systemctl restart httpd"
        done
