name: Deploy Application

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Package the repository
      - name: Package application
        run: |
          mkdir -p /tmp/app_package
          cp -R . /tmp/app_package
          tar --exclude='/tmp/app_package/.git' -czf app_$(date +%Y%m%d).tar.gz -C /tmp/app_package .

      # 3. Upload the package to S3 (Public Bucket)
      - name: Upload to Public S3 Bucket
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp app_$(date +%Y%m%d).tar.gz s3://omar-app-bucket/

      # 4. Fetch wp-config.php from Private S3 Bucket
      - name: Fetch wp-config.php
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp s3://omar-app-private-bucket/wp-config.php /tmp/wp-config.php

      # 5. Deploy to Auto Scaling Group Instances
      - name: Deploy application to EC2 instances
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-name omar-alb \
          --query "AutoScalingGroups[0].Instances[].InstanceId" --output text)
          
          for INSTANCE_ID in $INSTANCE_IDS; do
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
              --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
            
            echo "Deploying to instance $INSTANCE_ID with IP $PUBLIC_IP"
            
            scp -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no /tmp/app_$(date +%Y%m%d).tar.gz ec2-user@$PUBLIC_IP:/tmp/
            scp -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no /tmp/wp-config.php ec2-user@$PUBLIC_IP:/tmp/
            
            ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no ec2-user@$PUBLIC_IP \
            "sudo tar -xzf /tmp/app_$(date +%Y%m%d).tar.gz -C /var/www/html && \
             sudo mv /tmp/wp-config.php /var/www/html/wp-config.php && \
             sudo systemctl restart httpd"
          done

      # 6. Cleanup old builds from S3
      - name: Cleanup old builds from S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3api list-objects --bucket omar-app-bucket --query "Contents[?LastModified<='$(date -d '-7 days' --utc +%Y-%m-%dT%H:%M:%SZ)'].[Key]" --output text | while read file; do
            aws s3 rm s3://omar-app-bucket/$file
          done
